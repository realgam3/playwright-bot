const Xvfb = require("xvfb");const {log} = require("@rpc-bot/bot/logs");const defaultConfig = require("@rpc-bot/bot/config");const {getBrowser} = require("./utils");const config = {    ...defaultConfig,    ...{        "events": {            "onInit": async function () {                this.log.info(`Initializing Browser...`);                // Start xvfb                this.xvfb = new Xvfb({                    silent: true,                    xvfb_args: this.config.xvfb.args,                });                this.xvfb.start();                // Start Browser                this.browser = await getBrowser(this.config.browser);            },            "onExit": async function () {                this.log.info(`Cleaning up...`);                // Close Browser                await this.browser.close();                // Stop xvfb                await this.xvfb.stop();            },            "onTaskStart": async function () {                // Create Browser Context                this.context = await this.browser.newContext(this.config.context);                // Create Page                this.page = await this.context.newPage(this.config.page);                // Setup Events                for (let [eventName, event] of Object.entries(this.config.context.events)) {                    this.context.on(eventName, event);                }                // Hook JavaScript Functions                await this.context.addInitScript(`(${this.config.page.evaluate.document_start.toString()})();`);            },            "onTaskComplete": async function () {                // Close Browser Context                await this.context.close();            },            "onTaskError": async function (error) {                if (error.name === "TimeOutError") {                    this.log.debug("Bot task timed out");                }            },        },        "extend": {            "example": async function () {                this.log.info(`Example extend function`);            },            // Add close pages function            closePages: async function () {                // for (let page of this.context.context.pages()) {                //     await page.close();                // }                await this.context.onTaskComplete();                await this.context.onTaskStart();            },            slowType: async function (selector, text, options = {"delay": 500}) {                await this.context.page.type(selector, text, options);            },            setCookies: async function (config, cookies) {                await this.context.context.addCookies(cookies);            },        },        "allowed_actions": [            "extend.example",            "page.type",            "page.goto",            "page.click",            "page.addCookies",            "extend.slowType",            "extend.setCookies",            "extend.closePages",            "page.waitForTimeout",            "page.waitForSelector",        ],        "xvfb": {            "args": [                "-screen", "0", '1280x720x24', "-ac"            ]        },        "browser": {            "product": "chrome",            "options": {                "headless": true,                "args": [                    "--no-sandbox",                    "--disable-gpu",                    "--ignore-certificate-errors",                    "--disable-dev-shm-usage",                ]            }        },        "context": {            "events": {                "console": (message) => {                    const level = message.type().toLowerCase();                    switch (level) {                        case "error":                            log.error(`console.${level}: ${message.text()}`);                            break;                        case "warn":                        case "warning":                            log.warn(`console.warn: ${message.text()}`);                            break;                        default:                            log.debug(`console.error: ${message.text()}`);                            break;                    }                },                "error": (message) => {                    log.error(message);                },                "pageerror": (message) => {                    log.error(message);                },            },            "options": {                "ignoreHTTPSErrors": true,            }        },        "page": {            "evaluate": {                "document_start": function () {                    window.open = () => {                        console.warn("window.open");                    };                    window.prompt = () => {                        console.warn("window.prompt");                    };                    window.confirm = () => {                        console.warn("window.confirm");                    };                    window.alert = () => {                        console.warn("window.alert");                    };                }            }        }    }}module.exports = config;